git 学习笔记

1、设置配置信息
$ git config --global user.name "wzhx"  设置名字
$ git config --global user.eamil "1219251709@qq.com"   设置邮箱

2、新建git仓库
$ cd E:
$ mkdir git-repository
$ cd git-repository
$ pwd
$ git init

3、添加并提交文件到仓库
在git-repository文件夹中新建readme.txt文件，编辑文件内容
$ git add readme.txt
$ git commit -m "wrote a readme file"

4、掌握工作区的状态
$ git status

5、查看修改内容
$ git diff readme.txt

6、版本回退
(1)HEAD 指向的版本就是当前版本，因此，git允许我们的版本在历史之间
穿梭，使用命令$ git reset --hard commit_id。
(2)穿梭前，用$ git log可以查看提交历史，以便确定要回退到八个版本。
(3)要重返未来，用$ git reflog查看命令历史，以便确定要回到那个版本。

7、撤销修改
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令
& git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，
第一步用命令 & git reset HEAD file, 就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，
不过前提是没有推送到远程库。

8、删除文件命令rm用于删除工作区的文件，如果文件已经被提交到版本库，可以用命令
$ git checkout -- filename , 将文件恢复。
而命令& git rm 用于删除版本库里的文件，如果要恢复，就要用命令$ git log
再用$ git reset --hard commit_id。回退到以前的版本。

9、关联远程仓库，使用命令$ git remote add origin http://github.com/JAWZHX/learngit.git
关联后，使用命令$ git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令 $ git push origin master推送最新修改。

10、要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
git 支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

11、git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建并切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

12、当出现合并分支冲突时，要先解决冲突，在提交，合并完成。
git log --graph命令可以看到分支合并图。

13、git分支十分强大，在团队开发中应该充分应用。
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来
曾经做过合并，而fast forward合并就看不出来曾经做过合并。

14、概览：master合并merge解决好的bug后，不要先把dev解印，先合并master，获取里面的bug方案后，在解印。解印时会有提示冲突，需手动改一次文件。

（1）：在  dev 下正常开发中，说有1个bug要解决，首先我需要把dev分支封存stash

（2）：在master下新建一个issue-101分支，解决bug，成功后

（3）：在master下合并issue-101

（4）：在 dev  下合并master，  这样才同步了里面的bug解决方案

（5）：解开dev封印stash pop，系统自动合并 & 提示有冲突，因为封存前dev写了东西，此时去文件里手动改冲突

（6）：继续开发dev，最后add，commit

（7）：在master下合并最后完成的dev

代码过程如下：

```
在此插入代码

（1）： $ git stash

（2）： $ git checkout master
   $ git checkout -b issue-101
    //去文件里修bug
    $ git add README.md
    $ git commit -m "fix-issue-101"

（3）： $ git checkout master
   $ git merge --no-ff -m "m-merge-issue-101" issue-101
   $ git branch -d issue-101

（4）： $ git checkout dev
    $ git merge --no-ff -m "dev-merge-m" master

（5）： $ git stash pop
            //提示冲突，去文件手动改正
            Auto-merging README.md
            CONFLICT (content): Merge conflict in README.md

（6）： //继续开发 ... ... ，完成后一并提交
    $ git add README.md
    $ git commit -m "fixconflict & append something"

（7）： $ git checkout master
    $ git merge --no-ff -m "m-merge-dev" dev
    $ git branch -d dev
	
15、开发一个新feature，最好新建一个分支；
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

16、并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？

master分支是主分支，因此要时刻与远程同步；

dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；

bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；

feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。

17、多人协作的工作模式通常是这样：

（1）首先，可以试图用git push origin branch-name推送自己的修改；

（2）如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

（3）如果合并有冲突，则解决冲突，并在本地提交；

（4）没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，
用命令git branch --set-upstream branch-name origin/branch-name。

18、查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。